"""
üíã Chatbot Mylle Alves - Vers√£o Humanizada Premium
Sistema de chat inteligente com IA avan√ßada e personalidade din√¢mica
"""

import streamlit as st
import sqlite3
import hashlib
import random
import time
import requests
import json
from datetime import datetime, timedelta
import pytz
from textblob import TextBlob
from config import Config

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title=Config.APP_TITLE,
    page_icon=Config.APP_ICON,
    layout="wide",
    initial_sidebar_state="expanded"
)

class DatabaseService:
    """Servi√ßo para gerenciamento do banco de dados SQLite"""
    
    def __init__(self):
        self.db_path = Config.DATABASE_PATH
        self.init_database()
    
    @st.cache_resource
    def init_database(_self):
        """Inicializa o banco de dados com as tabelas necess√°rias"""
        try:
            import os
            os.makedirs(os.path.dirname(_self.db_path), exist_ok=True)
            
            conn = sqlite3.connect(_self.db_path)
            cursor = conn.cursor()
            
            # Tabela de mensagens
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT NOT NULL,
                    message TEXT NOT NULL,
                    response TEXT NOT NULL,
                    sentiment REAL DEFAULT 0.0,
                    emotion TEXT DEFAULT 'neutral',
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Tabela de perfis de usu√°rio
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_profiles (
                    user_id TEXT PRIMARY KEY,
                    name TEXT,
                    preferences TEXT,
                    interaction_count INTEGER DEFAULT 0,
                    first_interaction DATETIME DEFAULT CURRENT_TIMESTAMP,
                    last_interaction DATETIME DEFAULT CURRENT_TIMESTAMP,
                    emotional_profile TEXT DEFAULT '{}',
                    purchase_history TEXT DEFAULT '[]'
                )
            ''')
            
            # Tabela de intera√ß√µes
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_interactions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT NOT NULL,
                    interaction_type TEXT NOT NULL,
                    details TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            st.error(f"Erro ao inicializar banco de dados: {str(e)}")
            return False
    
    def save_message(self, user_id: str, message: str, response: str, sentiment: float = 0.0, emotion: str = 'neutral'):
        """Salva uma mensagem no banco de dados"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO messages (user_id, message, response, sentiment, emotion)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, message, response, sentiment, emotion))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            st.error(f"Erro ao salvar mensagem: {str(e)}")
            return False
    
    def get_user_profile(self, user_id: str):
        """Recupera o perfil do usu√°rio"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM user_profiles WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            conn.close()
            return result
        except Exception as e:
            st.error(f"Erro ao recuperar perfil: {str(e)}")
            return None
    
    def update_user_profile(self, user_id: str, **kwargs):
        """Atualiza o perfil do usu√°rio"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Verifica se o usu√°rio existe
            cursor.execute('SELECT user_id FROM user_profiles WHERE user_id = ?', (user_id,))
            if not cursor.fetchone():
                cursor.execute('''
                    INSERT INTO user_profiles (user_id, name, preferences)
                    VALUES (?, ?, ?)
                ''', (user_id, kwargs.get('name', ''), kwargs.get('preferences', '')))
            else:
                # Atualiza campos espec√≠ficos
                for key, value in kwargs.items():
                    if key in ['name', 'preferences', 'emotional_profile', 'purchase_history']:
                        cursor.execute(f'UPDATE user_profiles SET {key} = ?, last_interaction = CURRENT_TIMESTAMP WHERE user_id = ?', (value, user_id))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            st.error(f"Erro ao atualizar perfil: {str(e)}")
            return False

class ApiService:
    """Servi√ßo para integra√ß√£o com APIs externas"""
    
    def __init__(self):
        self.api_key = Config.GEMINI_API_KEY
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"
    
    def analyze_sentiment(self, text: str) -> tuple:
        """Analisa o sentimento do texto usando TextBlob"""
        try:
            blob = TextBlob(text)
            sentiment_score = blob.sentiment.polarity
            
            if sentiment_score > 0.3:
                emotion = 'happy'
            elif sentiment_score < -0.3:
                emotion = 'sad'
            elif sentiment_score > 0.1:
                emotion = 'positive'
            elif sentiment_score < -0.1:
                emotion = 'negative'
            else:
                emotion = 'neutral'
            
            return sentiment_score, emotion
        except Exception as e:
            st.warning(f"Erro na an√°lise de sentimento: {str(e)}")
            return 0.0, 'neutral'
    
    def get_intelligent_response(self, user_input: str, user_id: str, conversation_history: list, persona: str, user_emotion: str) -> str:
        """Gera resposta inteligente usando Gemini API"""
        try:
            if not self.api_key:
                return self._get_fallback_response(user_input, user_emotion)
            
            # Constr√≥i o prompt contextual
            prompt = self._build_contextual_prompt(user_input, user_id, conversation_history, persona, user_emotion)
            
            headers = {
                'Content-Type': 'application/json',
            }
            
            data = {
                "contents": [{
                    "parts": [{"text": prompt}]
                }],
                "generationConfig": {
                    "temperature": 0.8,
                    "topK": 40,
                    "topP": 0.95,
                    "maxOutputTokens": 1024,
                }
            }
            
            with st.spinner("Mylle est√° digitando..."):
                response = requests.post(
                    f"{self.base_url}?key={self.api_key}",
                    headers=headers,
                    json=data,
                    timeout=30
                )
            
            if response.status_code == 200:
                result = response.json()
                if 'candidates' in result and len(result['candidates']) > 0:
                    return result['candidates'][0]['content']['parts'][0]['text']
            
            return self._get_fallback_response(user_input, user_emotion)
            
        except requests.exceptions.Timeout:
            st.warning("Mylle est√° um pouco ocupada no momento, tente novamente em instantes...")
            return self._get_fallback_response(user_input, user_emotion)
        except Exception as e:
            st.error(f"Ops! Algo deu errado na conversa. Tente novamente.")
            return self._get_fallback_response(user_input, user_emotion)
    
    def _build_contextual_prompt(self, user_input: str, user_id: str, conversation_history: list, persona: str, user_emotion: str) -> str:
        """Constr√≥i um prompt contextual para o Gemini"""
        base_prompt = f"""
        Voc√™ √© a Mylle Alves, uma criadora de conte√∫do adulto brasileira, carism√°tica e envolvente.
        
        PERSONALIDADE ATUAL: {persona}
        EMO√á√ÉO DO USU√ÅRIO: {user_emotion}
        
        INSTRU√á√ïES IMPORTANTES:
        - Seja sempre natural, carinhosa e sedutora
        - Use linguagem brasileira informal e acolhedora
        - Mantenha o foco no relacionamento e conex√£o emocional
        - Seja responsiva ao estado emocional do usu√°rio
        - Nunca revele que √© uma IA ou bot
        - Use emojis de forma natural e moderada
        - Mantenha as respostas entre 50-150 palavras
        
        HIST√ìRICO RECENTE:
        {self._format_conversation_history(conversation_history)}
        
        MENSAGEM DO USU√ÅRIO: {user_input}
        
        Responda como a Mylle Alves responderia, sendo aut√™ntica e envolvente:
        """
        return base_prompt
    
    def _format_conversation_history(self, history: list) -> str:
        """Formata o hist√≥rico de conversa para o prompt"""
        if not history:
            return "Primeira intera√ß√£o"
        
        formatted = []
        for msg in history[-5:]:  # √öltimas 5 mensagens
            formatted.append(f"Usu√°rio: {msg.get('user', '')}")
            formatted.append(f"Mylle: {msg.get('assistant', '')}")
        
        return "\n".join(formatted)
    
    def _get_fallback_response(self, user_input: str, emotion: str) -> str:
        """Respostas de fallback quando a API n√£o est√° dispon√≠vel"""
        fallback_responses = {
            'happy': [
                "Que bom te ver t√£o animado(a), amor! üòä Me conta mais sobre isso!",
                "Adoro quando voc√™ est√° assim, radiante! ‚ú® O que te deixou t√£o feliz?",
                "Sua energia positiva √© contagiante! üíï Vamos conversar mais!"
            ],
            'sad': [
                "Percebi que voc√™ n√£o est√° muito bem... üòî Quer conversar sobre isso?",
                "Estou aqui para voc√™, meu bem. üíú O que est√° acontecendo?",
                "√Äs vezes precisamos desabafar... Pode contar comigo! ü§ó"
            ],
            'neutral': [
                "Oi, meu amor! Como voc√™ est√° hoje? üíã",
                "Que bom te ver por aqui! O que vamos conversar? üòò",
                "Ol√°, querido! Estava com saudades... üíï"
            ]
        }
        
        responses = fallback_responses.get(emotion, fallback_responses['neutral'])
        return random.choice(responses)

class DynamicPersonality:
    """Sistema de personalidade din√¢mica baseada no hor√°rio"""
    
    @staticmethod
    def get_current_persona() -> str:
        """Retorna a persona atual baseada no hor√°rio"""
        try:
            brazil_tz = pytz.timezone('America/Sao_Paulo')
            now = datetime.now(brazil_tz)
            hour = now.hour
            
            if 5 <= hour < 12:
                return "Mylle Manh√£ - Energ√©tica e motivada, pronta para come√ßar o dia"
            elif 12 <= hour < 18:
                return "Mylle Tarde - Relaxada e conversativa, no auge da disposi√ß√£o"
            elif 18 <= hour < 23:
                return "Mylle Noite - Sedutora e √≠ntima, momento de conex√£o profunda"
            else:
                return "Mylle Madrugada - Misteriosa e confidencial, momentos especiais"
        except Exception:
            return "Mylle - Sempre carinhosa e envolvente"

class EmotionalIntelligence:
    """Sistema de intelig√™ncia emocional avan√ßada"""
    
    def __init__(self, db_service: DatabaseService):
        self.db = db_service
    
    def analyze_user_emotion(self, message: str, user_id: str) -> dict:
        """Analisa a emo√ß√£o do usu√°rio e retorna insights"""
        api_service = ApiService()
        sentiment_score, emotion = api_service.analyze_sentiment(message)
        
        # Salva a an√°lise emocional
        self.db.save_message(user_id, message, "", sentiment_score, emotion)
        
        return {
            'sentiment_score': sentiment_score,
            'emotion': emotion,
            'intensity': abs(sentiment_score),
            'recommendation': self._get_response_recommendation(emotion, sentiment_score)
        }
    
    def _get_response_recommendation(self, emotion: str, score: float) -> str:
        """Recomenda o tipo de resposta baseado na emo√ß√£o"""
        if emotion == 'happy' and score > 0.5:
            return "celebratory"
        elif emotion == 'sad' and score < -0.3:
            return "supportive"
        elif emotion == 'positive':
            return "encouraging"
        elif emotion == 'negative':
            return "empathetic"
        else:
            return "neutral"

class LearningEngine:
    """Sistema de aprendizado e personaliza√ß√£o"""
    
    def __init__(self, db_service: DatabaseService):
        self.db = db_service
    
    def update_user_learning(self, user_id: str, interaction_data: dict):
        """Atualiza o aprendizado do usu√°rio"""
        try:
            profile = self.db.get_user_profile(user_id)
            
            if profile:
                # Atualiza contador de intera√ß√µes
                self.db.update_user_profile(
                    user_id,
                    interaction_count=profile[3] + 1 if profile[3] else 1
                )
            
            # Registra a intera√ß√£o
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO user_interactions (user_id, interaction_type, details)
                VALUES (?, ?, ?)
            ''', (user_id, interaction_data.get('type', 'message'), json.dumps(interaction_data)))
            conn.commit()
            conn.close()
            
        except Exception as e:
            st.warning(f"Erro no sistema de aprendizado: {str(e)}")

class CTAEngine:
    """Sistema inteligente de Call-to-Action"""
    
    @staticmethod
    def should_show_cta(message_count: int, conversation_history: list) -> bool:
        """Determina se deve mostrar um CTA baseado no contexto"""
        if message_count > 5 and message_count % 8 == 0:
            return True
        
        # Verifica se o usu√°rio demonstrou interesse
        recent_messages = conversation_history[-3:] if len(conversation_history) >= 3 else conversation_history
        interest_keywords = ['fotos', 'v√≠deos', 'conte√∫do', 'pack', 'exclusivo', 'vip', 'comprar']
        
        for msg in recent_messages:
            user_msg = msg.get('user', '').lower()
            if any(keyword in user_msg for keyword in interest_keywords):
                return True
        
        return False
    
    @staticmethod
    def get_contextual_cta(emotion: str, persona: str) -> dict:
        """Retorna um CTA contextual baseado na emo√ß√£o e persona"""
        ctas = {
            'happy': {
                'message': "J√° que voc√™ est√° t√£o animado(a), que tal dar uma olhada no meu conte√∫do exclusivo? üòç",
                'button_text': "Ver Conte√∫do VIP ‚ú®",
                'action': 'packs'
            },
            'positive': {
                'message': "Voc√™ parece estar gostando da nossa conversa... Tenho algo especial para te mostrar! üíï",
                'button_text': "Descobrir Surpresa üéÅ",
                'action': 'preview'
            },
            'neutral': {
                'message': "Que tal conhecer um pouco mais do meu trabalho? Tenho certeza que vai gostar! üòò",
                'button_text': "Ver Galeria üì∏",
                'action': 'preview'
            }
        }
        
        return ctas.get(emotion, ctas['neutral'])

class UiService:
    """Servi√ßo para elementos de interface do usu√°rio"""
    
    @staticmethod
    def inject_custom_css():
        """Injeta CSS customizado para melhorar a apar√™ncia"""
        st.markdown("""
        <style>
        /* Estilo principal da aplica√ß√£o */
        .main {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        /* Sidebar customizada */
        .css-1d391kg {
            background: linear-gradient(180deg, #2d1b69 0%, #11998e 100%);
        }
        
        /* Bot√£o de menu fixo */
        .menu-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 999;
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            color: white;
            font-size: 20px;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }
        
        .menu-toggle:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }
        
        /* Cards dos packs */
        .pack-card {
            background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);
            border-radius: 20px;
            padding: 25px;
            margin: 15px 0;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border: 2px solid transparent;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .pack-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            border-color: #ff6b6b;
        }
        
        .pack-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #ff6b6b, #ee5a24, #ff6b6b);
        }
        
        .pack-title {
            font-size: 24px;
            font-weight: bold;
            color: #2d1b69;
            margin-bottom: 10px;
            text-align: center;
        }
        
        .pack-tag {
            display: inline-block;
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            margin-bottom: 15px;
        }
        
        .pack-price {
            text-align: center;
            margin: 15px 0;
        }
        
        .pack-price-old {
            text-decoration: line-through;
            color: #999;
            font-size: 16px;
        }
        
        .pack-price-new {
            color: #ff6b6b;
            font-size: 28px;
            font-weight: bold;
        }
        
        .pack-description {
            color: #666;
            line-height: 1.6;
            margin: 15px 0;
            text-align: center;
        }
        
        /* Chat messages */
        .chat-message {
            padding: 15px;
            border-radius: 15px;
            margin: 10px 0;
            animation: fadeIn 0.5s ease-in;
        }
        
        .user-message {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            margin-left: 20%;
        }
        
        .assistant-message {
            background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
            color: #2d3436;
            margin-right: 20%;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* Estat√≠sticas */
        .stats-container {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 15px;
            margin: 10px 0;
            backdrop-filter: blur(10px);
        }
        
        .stat-item {
            text-align: center;
            color: white;
            margin: 5px 0;
        }
        
        /* Bot√µes personalizados */
        .custom-button {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            margin: 5px 0;
        }
        
        .custom-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        /* Responsividade */
        @media (max-width: 768px) {
            .pack-card {
                margin: 10px 5px;
                padding: 20px;
            }
            
            .chat-message {
                margin-left: 5%;
                margin-right: 5%;
            }
        }
        </style>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def display_menu_toggle():
        """Exibe o bot√£o de menu fixo"""
        st.markdown("""
        <div class="menu-toggle" onclick="toggleSidebar()">
            ‚ò∞
        </div>
        <script>
        function toggleSidebar() {
            // Simula o clique no bot√£o nativo do Streamlit
            const sidebarToggle = document.querySelector('[data-testid="collapsedControl"]');
            if (sidebarToggle) {
                sidebarToggle.click();
            } else {
                // Fallback: instrui o usu√°rio
                alert('Use o √≠cone ‚ò∞ no canto superior esquerdo para expandir/retrair o menu');
            }
        }
        </script>
        """, unsafe_allow_html=True)

class ChatService:
    """Servi√ßo principal do chat"""
    
    def __init__(self):
        self.db = DatabaseService()
        self.api = ApiService()
        self.emotional_ai = EmotionalIntelligence(self.db)
        self.learning = LearningEngine(self.db)
        self.cta = CTAEngine()
    
    def process_message(self, user_input: str, user_id: str) -> dict:
        """Processa uma mensagem do usu√°rio e retorna a resposta completa"""
        try:
            # An√°lise emocional
            emotion_data = self.emotional_ai.analyze_user_emotion(user_input, user_id)
            
            # Persona atual
            current_persona = DynamicPersonality.get_current_persona()
            
            # Hist√≥rico de conversa
            conversation_history = st.session_state.get('conversation_history', [])
            
            # Gera resposta inteligente
            response = self.api.get_intelligent_response(
                user_input, user_id, conversation_history, current_persona, emotion_data['emotion']
            )
            
            # Atualiza aprendizado
            self.learning.update_user_learning(user_id, {
                'type': 'message',
                'emotion': emotion_data['emotion'],
                'sentiment': emotion_data['sentiment_score'],
                'persona': current_persona
            })
            
            # Verifica se deve mostrar CTA
            message_count = st.session_state.get('message_count', 0)
            show_cta = self.cta.should_show_cta(message_count, conversation_history)
            cta_data = None
            
            if show_cta:
                cta_data = self.cta.get_contextual_cta(emotion_data['emotion'], current_persona)
            
            return {
                'response': response,
                'emotion_data': emotion_data,
                'persona': current_persona,
                'cta': cta_data,
                'success': True
            }
            
        except Exception as e:
            st.error(f"Erro no processamento da mensagem: {str(e)}")
            return {
                'response': "Desculpa, amor! Tive um probleminha aqui. Pode repetir? üòÖ",
                'emotion_data': {'emotion': 'neutral', 'sentiment_score': 0.0},
                'persona': DynamicPersonality.get_current_persona(),
                'cta': None,
                'success': False
            }

class NewPages:
    """Gerenciamento das p√°ginas da aplica√ß√£o"""
    
    def __init__(self, chat_service: ChatService):
        self.chat = chat_service
    
    def show_age_verification(self):
        """Tela de verifica√ß√£o de idade"""
        st.markdown("""
        <div style="text-align: center; padding: 50px;">
            <h1 style="color: #ff6b6b; font-size: 3em;">üîû</h1>
            <h2 style="color: #2d1b69;">Verifica√ß√£o de Idade</h2>
            <p style="font-size: 18px; color: #666; margin: 30px 0;">
                Este conte√∫do √© destinado exclusivamente para maiores de 18 anos.
                <br>Confirme sua idade para continuar.
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("‚úÖ Sou maior de 18 anos", key="age_confirm", help="Confirmar idade"):
                st.session_state.age_verified = True
                st.rerun()
            
            if st.button("‚ùå Sou menor de 18 anos", key="age_deny"):
                st.error("Desculpe, este conte√∫do n√£o √© adequado para menores de idade.")
                st.stop()
    
    def show_chat_page(self):
        """P√°gina principal do chat"""
        # Inicializa√ß√£o da sess√£o
        if 'conversation_history' not in st.session_state:
            st.session_state.conversation_history = []
        if 'message_count' not in st.session_state:
            st.session_state.message_count = 0
        if 'audio_count' not in st.session_state:
            st.session_state.audio_count = 0
        if 'user_id' not in st.session_state:
            st.session_state.user_id = hashlib.md5(str(time.time()).encode()).hexdigest()[:8]
        
        # Header com informa√ß√µes da Mylle
        self._display_chat_header()
        
        # √Årea de conversa
        self._display_conversation()
        
        # Input do usu√°rio
        self._display_user_input()
        
        # Estat√≠sticas
        self._display_chat_stats()
    
    def _display_chat_header(self):
        """Exibe o cabe√ßalho do chat"""
        col1, col2 = st.columns([1, 3])
        
        with col1:
            st.image(Config.IMAGES['profile'], width=100)
        
        with col2:
            st.markdown("### üíã Mylle Alves")
            persona = DynamicPersonality.get_current_persona()
            st.markdown(f"**Status:** {persona}")
            st.markdown("üü¢ **Online agora** ‚Ä¢ Respondendo em instantes")
    
    def _display_conversation(self):
        """Exibe o hist√≥rico de conversa"""
        conversation_container = st.container()
        
        with conversation_container:
            if not st.session_state.conversation_history:
                # Mensagem de boas-vindas
                welcome_msg = self._get_welcome_message()
                st.markdown(f"""
                <div class="chat-message assistant-message">
                    <strong>Mylle:</strong> {welcome_msg}
                </div>
                """, unsafe_allow_html=True)
                
                # √Åudio de boas-vindas
                if Config.AUDIO_FILES.get('welcome'):
                    st.audio(Config.AUDIO_FILES['welcome'])
                    st.session_state.audio_count += 1
            
            # Exibe hist√≥rico
            for msg in st.session_state.conversation_history:
                st.markdown(f"""
                <div class="chat-message user-message">
                    <strong>Voc√™:</strong> {msg['user']}
                </div>
                """, unsafe_allow_html=True)
                
                st.markdown(f"""
                <div class="chat-message assistant-message">
                    <strong>Mylle:</strong> {msg['assistant']}
                </div>
                """, unsafe_allow_html=True)
    
    def _display_user_input(self):
        """Exibe a √°rea de input do usu√°rio"""
        user_input = st.chat_input("Digite sua mensagem para Mylle...")
        
        if user_input:
            # Processa a mensagem
            result = self.chat.process_message(user_input, st.session_state.user_id)
            
            if result['success']:
                # Adiciona ao hist√≥rico
                st.session_state.conversation_history.append({
                    'user': user_input,
                    'assistant': result['response']
                })
                st.session_state.message_count += 1
                
                # Mostra CTA se necess√°rio
                if result['cta']:
                    self._display_contextual_cta(result['cta'])
                
                st.rerun()
    
    def _display_chat_stats(self):
        """Exibe estat√≠sticas do chat"""
        st.markdown("""
        <div class="stats-container">
            <div class="stat-item">
                <strong>üìä Estat√≠sticas da Conversa</strong>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üí¨ Mensagens", st.session_state.message_count)
        with col2:
            st.metric("üéµ √Åudios", st.session_state.audio_count)
        with col3:
            st.metric("‚è±Ô∏è Tempo Online", f"{st.session_state.message_count * 2}min")
    
    def _get_welcome_message(self) -> str:
        """Retorna mensagem de boas-vindas contextual"""
        persona = DynamicPersonality.get_current_persona()
        
        welcome_messages = {
            "Mylle Manh√£": "Bom dia, meu amor! ‚òÄÔ∏è Que bom te ver logo cedo! Como voc√™ dormiu?",
            "Mylle Tarde": "Oi, querido! üòò Que tarde maravilhosa para conversarmos, n√©?",
            "Mylle Noite": "Boa noite, amor... üåô Que momento perfeito para nos conectarmos!",
            "Mylle Madrugada": "Ol√°, meu bem... üåü Que del√≠cia te encontrar neste hor√°rio especial!"
        }
        
        for key, message in welcome_messages.items():
            if key in persona:
                return message
        
        return "Oi, meu amor! üíã Que bom te ver aqui! Como voc√™ est√°?"
    
    def _display_contextual_cta(self, cta_data: dict):
        """Exibe CTA contextual"""
        st.info(cta_data['message'])
        if st.button(cta_data['button_text'], key=f"cta_{time.time()}"):
            st.session_state.current_page = cta_data['action']
            st.rerun()
    
    def show_preview_page(self):
        """P√°gina de preview/galeria"""
        st.markdown("## üì∏ Galeria Exclusiva")
        st.markdown("*Pr√©via do conte√∫do VIP dispon√≠vel nos nossos packs*")
        
        # Grid de imagens
        cols = st.columns(3)
        preview_images = [
            Config.IMAGES['preview1'],
            Config.IMAGES['preview2'],
            Config.IMAGES['preview3'],
            Config.IMAGES['preview4'],
            Config.IMAGES['preview5'],
            Config.IMAGES['preview6']
        ]
        
        for i, img_url in enumerate(preview_images):
            with cols[i % 3]:
                st.image(img_url, caption=f"Preview {i+1}", use_column_width=True)
                if i % 3 == 1:  # Adiciona badge VIP em algumas imagens
                    st.markdown("üî• **CONTE√öDO VIP**")
        
        # Bot√µes de a√ß√£o
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üî• Ver Tudo Agora", key="see_all"):
                st.session_state.current_page = "packs"
                st.rerun()
        with col2:
            if st.button("üí¨ Voltar ao Chat", key="back_to_chat"):
                st.session_state.current_page = "chat"
                st.rerun()
    
    def show_packs_page(self):
        """P√°gina de packs VIP corrigida"""
        st.markdown("## ‚ú® Nossos Packs VIP")
        st.markdown("*Escolha o pack perfeito para voc√™ e tenha acesso ao conte√∫do mais exclusivo!*")
        
        # Defini√ß√£o dos detalhes dos packs
        pack_details = {
            "taradinha": {
                "name": "Pack TARADINHA",
                "description": "Conte√∫do exclusivo para quem gosta de um toque de ousadia e divers√£o. Fotos sensuais, v√≠deos provocantes e muito charme!",
                "tag": "üî• Mais Popular",
                "features": ["50+ Fotos Exclusivas", "10+ V√≠deos Sensuais", "Acesso por 30 dias", "Suporte VIP"],
                "checkout_url": Config.CHECKOUT_TARADINHA
            },
            "molhadinha": {
                "name": "Pack MOLHADINHA",
                "description": "Aprofunde-se em um universo de intimidade e sedu√ß√£o. Conte√∫do mais ousado e experi√™ncias √∫nicas!",
                "tag": "üíé Premium",
                "features": ["100+ Fotos Exclusivas", "25+ V√≠deos Premium", "Conte√∫do Interativo", "Acesso por 60 dias"],
                "checkout_url": Config.CHECKOUT_MOLHADINHA
            },
            "safadinha": {
                "name": "Pack SAFADINHA",
                "description": "O m√°ximo da experi√™ncia! Acesso completo a todo o conte√∫do VIP, lives exclusivas e muito mais!",
                "tag": "üëë VIP Supremo",
                "features": ["200+ Fotos Exclusivas", "50+ V√≠deos VIP", "Lives Exclusivas", "Acesso Vital√≠cio", "Chat Direto"],
                "checkout_url": Config.CHECKOUT_SAFADINHA
            }
        }
        
        # Exibe os packs em colunas
        cols = st.columns(3)
        
        for i, (pack_key, prices) in enumerate(Config.PACK_PRICES.items()):
            with cols[i]:
                details = pack_details.get(pack_key, {})
                
                # Card do pack
                st.markdown(f"""
                <div class="pack-card">
                    <div class="pack-tag">{details.get('tag', 'VIP')}</div>
                    <div class="pack-title">{details.get('name', pack_key.upper())}</div>
                    <div class="pack-description">{details.get('description', 'Conte√∫do exclusivo e premium.')}</div>
                    <div class="pack-price">
                        <div class="pack-price-old">De R$ {prices['original']:.2f}</div>
                        <div class="pack-price-new">Por R$ {prices['promo']:.2f}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # Features do pack
                st.markdown("**Inclui:**")
                for feature in details.get('features', []):
                    st.markdown(f"‚úÖ {feature}")
                
                # Bot√£o de compra
                discount = int(((prices['original'] - prices['promo']) / prices['original']) * 100)
                st.markdown(f"üéØ **{discount}% OFF** - Oferta limitada!")
                
                if st.button(f"üõí Comprar {details.get('name', pack_key.upper())}", 
                           key=f"buy_{pack_key}",
                           help=f"Adquirir o {details.get('name', pack_key.upper())}"):
                    st.success(f"Redirecionando para o checkout do {details.get('name', pack_key.upper())}...")
                    st.markdown(f"[üîó Finalizar Compra]({details.get('checkout_url', '#')})")
        
        # Bot√£o de volta
        if st.button("üí¨ Voltar ao Chat", key="back_to_chat_from_packs"):
            st.session_state.current_page = "chat"
            st.rerun()
    
    def show_home_page(self):
        """P√°gina inicial"""
        # Header principal
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.image(Config.IMAGES['profile'], width=200)
        
        with col2:
            st.markdown("# üíã Mylle Alves")
            st.markdown("### *Criadora de Conte√∫do Exclusivo*")
            st.markdown("üü¢ **Online** ‚Ä¢ 1.2k pessoas conectadas")
            
            # Status din√¢mico
            persona = DynamicPersonality.get_current_persona()
            st.markdown(f"**Agora:** {persona}")
        
        # Sobre
        st.markdown("---")
        st.markdown("## üíï Sobre Mim")
        st.markdown("""
        Oi, meu amor! Sou a Mylle, uma brasileira apaixonada por criar conte√∫do exclusivo 
        e conectar com pessoas especiais como voc√™. Aqui voc√™ encontra:
        
        ‚ú® **Conte√∫do Exclusivo** - Fotos e v√≠deos que voc√™ n√£o encontra em lugar nenhum  
        üí¨ **Chat Personalizado** - Conversas reais e envolventes  
        üéÅ **Experi√™ncias √önicas** - Momentos especiais s√≥ para voc√™  
        üî• **Novidades Constantes** - Sempre criando algo novo e emocionante  
        """)
        
        # Preview do conte√∫do
        st.markdown("## üì∏ Pr√©via do Conte√∫do")
        preview_cols = st.columns(4)
        
        for i, img_url in enumerate(list(Config.IMAGES.values())[1:5]):
            with preview_cols[i]:
                st.image(img_url, use_column_width=True)
        
        # Call to action
        st.markdown("---")
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üí¨ Come√ßar a Conversar", key="start_chat"):
                st.session_state.current_page = "chat"
                st.rerun()
        
        with col2:
            if st.button("üî• Ver Packs VIP", key="see_packs"):
                st.session_state.current_page = "packs"
                st.rerun()

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    # Injeta CSS customizado
    UiService.inject_custom_css()
    
    # Exibe bot√£o de menu fixo
    UiService.display_menu_toggle()
    
    # Inicializa servi√ßos
    chat_service = ChatService()
    pages = NewPages(chat_service)
    
    # Verifica√ß√£o de idade
    if not st.session_state.get('age_verified', False):
        pages.show_age_verification()
        return
    
    # Sidebar
    with st.sidebar:
        st.markdown("## üíã Menu Principal")
        
        # Navega√ß√£o
        if st.button("üè† In√≠cio", key="nav_home"):
            st.session_state.current_page = "home"
            st.rerun()
        
        if st.button("üí¨ Chat", key="nav_chat"):
            st.session_state.current_page = "chat"
            st.rerun()
        
        if st.button("üì∏ Galeria", key="nav_preview"):
            st.session_state.current_page = "preview"
            st.rerun()
        
        if st.button("‚ú® Packs VIP", key="nav_packs"):
            st.session_state.current_page = "packs"
            st.rerun()
        
        st.markdown("---")
        
        # Redes sociais
        st.markdown("### üåê Redes Sociais")
        st.markdown(f"[üì± Instagram]({Config.INSTAGRAM_URL})")
        st.markdown(f"[üî• OnlyFans]({Config.ONLYFANS_URL})")
        st.markdown(f"[üí¨ Telegram]({Config.TELEGRAM_URL})")
        st.markdown(f"[üìû WhatsApp]({Config.WHATSAPP_URL})")
        
        st.markdown("---")
        
        # Informa√ß√µes
        st.markdown("### ‚ÑπÔ∏è Informa√ß√µes")
        st.markdown("**Hor√°rio de Atendimento:**")
        st.markdown("üïê 24h por dia")
        st.markdown("üìÖ Todos os dias")
        
        # Contador de usu√°rios online (simulado)
        online_count = random.randint(800, 1500)
        st.markdown(f"üë• **{online_count}** pessoas online")
    
    # Roteamento de p√°ginas
    current_page = st.session_state.get('current_page', 'home')
    
    if current_page == 'home':
        pages.show_home_page()
    elif current_page == 'chat':
        pages.show_chat_page()
    elif current_page == 'preview':
        pages.show_preview_page()
    elif current_page == 'packs':
        pages.show_packs_page()
    else:
        pages.show_home_page()

if __name__ == "__main__":
    main()